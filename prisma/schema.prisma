generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Genealogist {
  id           Int           @id @default(autoincrement())
  fullName     String?
  phone        String?
  lastAccessAt DateTime?
  clerkId      String        @unique
  createdAt    DateTime      @default(now())
  role         Role?         @default(INDEXER)
  updatedAt    DateTime?     @updatedAt
  accessTimes  AccessTime[]
  batchNumbers BatchNumber[]
  Report       Report[]
}

model AccessTime {
  id            Int          @id @default(autoincrement())
  genealogistId Int?         @db.SmallInt
  loginAt       DateTime?
  logoutAt      DateTime?
  genealogist   Genealogist? @relation(fields: [genealogistId], references: [id])
}

model Obituary {
  id             Int           @id @default(autoincrement())
  reference      String        @unique @db.Char(8)
  surname        String?
  titleId        Int?          @db.SmallInt
  givenNames     String?
  maidenName     String?
  birthDate      DateTime?     @db.Date
  birthCityId    Int?          @db.SmallInt
  deathDate      DateTime?     @db.Date
  deathCityId    Int?          @db.SmallInt
  burialCemetery String?
  cemeteryId     Int?          @db.SmallInt
  place          String?
  periodicalId   Int?          @db.SmallInt
  publishDate    DateTime?     @db.Date
  page           String?       @db.VarChar(8)
  column         String?       @db.VarChar(8)
  notes          String?
  proofread      Boolean       @default(false)
  proofreadDate  DateTime?     @db.Date
  proofreadBy    String?
  enteredBy      String?
  enteredOn      DateTime?     @default(now())
  editedBy       String?
  editedOn       DateTime?     @updatedAt
  fileBoxId      Int?          @db.SmallInt
  publicHash     String?       @unique
  imageNames     String[]      @default([])
  batchNumberId  String?
  alsoKnownAs    AlsoKnownAs[]
  images         Image[]
  fileImages     ImageFile[]
  batchNumber    BatchNumber?  @relation(fields: [batchNumberId], references: [id])
  birthCity      City?         @relation("birthCityId", fields: [birthCityId], references: [id])
  cemetery       Cemetery?     @relation(fields: [cemeteryId], references: [id])
  deathCity      City?         @relation("deathCityId", fields: [deathCityId], references: [id])
  fileBox        FileBox?      @relation(fields: [fileBoxId], references: [id])
  periodical     Periodical?   @relation(fields: [periodicalId], references: [id])
  title          Title?        @relation(fields: [titleId], references: [id])
  relatives      Relative[]

  @@index([reference])
}

model Relative {
  id                   Int                 @id @default(autoincrement())
  obituaryId           Int
  surname              String?
  givenNames           String?
  relationship         String?
  predeceased          Boolean             @default(false)
  familyRelationshipId String?
  familyRelationship   FamilyRelationship? @relation(fields: [familyRelationshipId], references: [id])
  Obituary             Obituary            @relation(fields: [obituaryId], references: [id])
}

model AlsoKnownAs {
  id         Int      @id @default(autoincrement())
  obituaryId Int
  surname    String?
  otherNames String?
  Obituary   Obituary @relation(fields: [obituaryId], references: [id])
}

model City {
  id                     Int          @id @default(autoincrement())
  name                   String?
  province               String?
  countryId              Int?
  cemeteries             Cemetery[]
  country                Country?     @relation(fields: [countryId], references: [id])
  obituaries_birthCityId Obituary[]   @relation("birthCityId")
  obituaries_deathCityId Obituary[]   @relation("deathCityId")
  periodicals            Periodical[]
}

model Country {
  id     Int    @id @default(autoincrement())
  name   String @unique
  cities City[]
}

model Cemetery {
  id         Int        @id @default(autoincrement())
  name       String?
  cityId     Int?       @db.SmallInt
  city       City?      @relation(fields: [cityId], references: [id])
  obituaries Obituary[]
}

model Periodical {
  id         Int        @id @default(autoincrement())
  name       String?
  cityId     Int?       @db.SmallInt
  url        String?
  obituaries Obituary[]
  city       City?      @relation(fields: [cityId], references: [id])
}

model Title {
  id         Int        @id @default(autoincrement())
  name       String?
  obituaries Obituary[]
}

model FileBox {
  id         Int        @id @default(autoincrement())
  year       Int        @db.SmallInt
  number     Int        @db.SmallInt
  obituaries Obituary[]
}

model ImageFile {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @unique
  extension String?
  size      Int?
  createdAt DateTime  @default(now())
  editedAt  DateTime  @updatedAt
  reference String?
  obituary  Obituary? @relation(fields: [reference], references: [reference])
}

model Settings {
  id            String   @id
  value         String
  lastUpdatedAt DateTime @updatedAt
  updatedBy     String?
}

model Image {
  id           String    @id @default(cuid())
  name         String    @unique
  size         Int
  lastModified DateTime  @default(now())
  etag         String
  prefix       String?
  reference    String?
  rotation     Int?      @default(0)
  obituary     Obituary? @relation(fields: [reference], references: [reference])

  @@index([name])
  @@index([lastModified])
}

model Report {
  id           String      @id @default(cuid())
  fileName     String
  searchQuery  String
  createdAt    DateTime    @default(now())
  userId       String
  role         String
  totalResults Int
  createdBy    Genealogist @relation(fields: [userId], references: [clerkId])
}

model FamilyRelationship {
  id        String     @id @default(cuid())
  name      String
  category  String
  relatives Relative[]
}

model BatchNumber {
  id                 String      @id @default(cuid())
  number             String      @unique
  assignedObituaries Int         @default(0)
  createdAt          DateTime    @default(now())
  createdById        String
  createdBy          Genealogist @relation(fields: [createdById], references: [clerkId])
  obituaries         Obituary[]
}

model Order {
  id                      String      @id @default(cuid())
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  status                  OrderStatus @default(PENDING)
  stripeCheckoutSessionId String?     @unique // Store Stripe Session ID
  stripePaymentIntentId   String?     @unique // Store Stripe Payment Intent ID after success
  totalAmount             Int // Store amount in cents
  currency                String      @default("cad")
  guestSessionId          String? // Link to guest session if needed
  // userId               String?     // Optional: Link to logged-in user if feature is added
  // user                 User?       @relation(fields: [userId], references: [id])
  items                   OrderItem[]
  // @@index([userId])

  @@index([guestSessionId])
}

model OrderItem {
  id           String @id @default(cuid())
  orderId      String
  order        Order  @relation(fields: [orderId], references: [id], onDelete: Cascade) // Ensure deletion cascades
  obituaryRef  String // The reference ID of the purchased obituary
  obituaryName String // Store the name for easier display
  price        Int // Store price in cents for this item (e.g., 1000 for $10.00)

  @@index([orderId])
  @@index([obituaryRef])
}

enum OrderStatus {
  PENDING // Order created, awaiting payment
  COMPLETED // Payment successful
  FAILED // Payment failed
  PROCESSING // Optional: If fulfillment takes time
}

enum Role {
  VIEWER
  INDEXER
  SCANNER
  PROOFREADER
  ADMIN
  PROCESS_MANAGER
}
