generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Genealogist {
  id           Int          @id @default(autoincrement())
  fullName     String?
  phone        String?
  lastAccessAt DateTime?
  clerkId      String       @unique
  createdAt    DateTime     @default(now())
  role         Role?        @default(INDEXER)
  updatedAt    DateTime?    @updatedAt
  accessTimes  AccessTime[]
}

model AccessTime {
  id            Int          @id @default(autoincrement())
  genealogistId Int?         @db.SmallInt
  loginAt       DateTime?
  logoutAt      DateTime?
  genealogist   Genealogist? @relation(fields: [genealogistId], references: [id])
}

model Obituary {
  id             Int           @id @default(autoincrement())
  reference      String        @unique @db.Char(8)
  surname        String?
  titleId        Int?          @db.SmallInt
  givenNames     String?
  maidenName     String?
  birthDate      DateTime?     @db.Date
  birthCityId    Int?          @db.SmallInt
  deathDate      DateTime?     @db.Date
  deathCityId    Int?          @db.SmallInt
  burialCemetery String?
  cemeteryId     Int?          @db.SmallInt
  place          String?
  periodicalId   Int?          @db.SmallInt
  publishDate    DateTime?     @db.Date
  page           String?       @db.VarChar(8)
  column         String?       @db.VarChar(8)
  notes          String?
  proofread      Boolean       @default(false)
  proofreadDate  DateTime?     @db.Date
  proofreadBy    String?
  enteredBy      String?
  enteredOn      DateTime?     @default(now())
  editedBy       String?
  editedOn       DateTime?     @updatedAt
  fileBoxId      Int?          @db.SmallInt
  batch          String?
  alsoKnownAs    AlsoKnownAs[]
  birthCity      City?         @relation("birthCityId", fields: [birthCityId], references: [id])
  cemetery       Cemetery?     @relation(fields: [cemeteryId], references: [id])
  deathCity      City?         @relation("deathCityId", fields: [deathCityId], references: [id])
  fileBox        FileBox?      @relation(fields: [fileBoxId], references: [id])
  periodical     Periodical?   @relation(fields: [periodicalId], references: [id])
  title          Title?        @relation(fields: [titleId], references: [id])
  relatives      Relative[]
}

model Relative {
  id           Int      @id @default(autoincrement())
  obituaryId   Int
  surname      String?
  givenNames   String?
  relationship String?
  predeceased  Boolean  @default(false)
  Obituary     Obituary @relation(fields: [obituaryId], references: [id])
}

model AlsoKnownAs {
  id         Int      @id @default(autoincrement())
  obituaryId Int
  surname    String?
  otherNames String?
  Obituary   Obituary @relation(fields: [obituaryId], references: [id])
}

model City {
  id                     Int        @id @default(autoincrement())
  name                   String?
  province               String?
  countryId              Int?
  cemeteries             Cemetery[]
  country                Country?   @relation(fields: [countryId], references: [id])
  obituaries_birthCityId Obituary[] @relation("birthCityId")
  obituaries_deathCityId Obituary[] @relation("deathCityId")
}

model Country {
  id     Int    @id @default(autoincrement())
  name   String
  cities City[]
}

model Cemetery {
  id         Int        @id @default(autoincrement())
  name       String?
  cityId     Int?       @db.SmallInt
  city       City?      @relation(fields: [cityId], references: [id])
  obituaries Obituary[]
}

model Periodical {
  id         Int        @id @default(autoincrement())
  name       String?
  obituaries Obituary[]
}

model Title {
  id         Int        @id @default(autoincrement())
  name       String?
  obituaries Obituary[]
}

model FileBox {
  id         Int        @id @default(autoincrement())
  year       Int        @db.SmallInt
  number     Int        @db.SmallInt
  obituaries Obituary[]
}

enum Role {
  VIEWER // view obituaries, images, etc.
  INDEXER // create file number, edit obituaries
  SCANNER // scan obituaries
  PROOFREADER // edit obituaries
  ADMIN // create, edit, delete obituaries, genealogists, etc.
}

model ImageFile {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @unique
  extension String?
  size      Int?
  createdAt DateTime @default(now())
  editedAt  DateTime @updatedAt
}

model Settings {
  id            String   @id
  value         String
  lastUpdatedAt DateTime @updatedAt
  updatedBy     String?
}
